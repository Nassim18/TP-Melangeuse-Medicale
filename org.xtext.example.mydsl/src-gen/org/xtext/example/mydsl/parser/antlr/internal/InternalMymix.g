/*
 * generated by Xtext 2.23.0
 */
grammar InternalMymix;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MymixGrammarAccess;

}

@parser::members {

 	private MymixGrammarAccess grammarAccess;

    public InternalMymixParser(TokenStream input, MymixGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Machine";
   	}

   	@Override
   	protected MymixGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	iv_ruleMachine=ruleMachine
	{ $current=$iv_ruleMachine.current; }
	EOF;

// Rule Machine
ruleMachine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMachineAccess().getOperationsOperationParserRuleCall_0());
			}
			lv_operations_0_0=ruleOperation
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMachineRule());
				}
				add(
					$current,
					"operations",
					lv_operations_0_0,
					"org.xtext.example.mydsl.Mymix.Operation");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getWaitParserRuleCall_0());
		}
		this_Wait_0=ruleWait
		{
			$current = $this_Wait_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getPutParserRuleCall_1());
		}
		this_Put_1=rulePut
		{
			$current = $this_Put_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePut
entryRulePut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPutRule()); }
	iv_rulePut=rulePut
	{ $current=$iv_rulePut.current; }
	EOF;

// Rule Put
rulePut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='put'
		{
			newLeafNode(otherlv_0, grammarAccess.getPutAccess().getPutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAccess().getQuantityQuantityParserRuleCall_1_0());
				}
				lv_quantity_1_0=ruleQuantity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_1_0,
						"org.xtext.example.mydsl.Mymix.Quantity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getPutAccess().getFromKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAccess().getCupCupParserRuleCall_3_0());
				}
				lv_cup_3_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutRule());
					}
					set(
						$current,
						"cup",
						lv_cup_3_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getPutAccess().getToKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAccess().getCupCupParserRuleCall_5_0());
				}
				lv_cup_5_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutRule());
					}
					set(
						$current,
						"cup",
						lv_cup_5_0,
						"org.xtext.example.mydsl.Mymix.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='filter'
			{
				newLeafNode(otherlv_6, grammarAccess.getPutAccess().getFilterKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPutAccess().getFilterFilterParserRuleCall_6_1_0());
					}
					lv_filter_7_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPutRule());
						}
						set(
							$current,
							"filter",
							lv_filter_7_0,
							"org.xtext.example.mydsl.Mymix.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPutAccess().getWaitWaitParserRuleCall_7_0());
				}
				lv_wait_8_0=ruleWait
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutRule());
					}
					add(
						$current,
						"wait",
						lv_wait_8_0,
						"org.xtext.example.mydsl.Mymix.Wait");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	iv_ruleWait=ruleWait
	{ $current=$iv_ruleWait.current; }
	EOF;

// Rule Wait
ruleWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='wait'
		{
			newLeafNode(otherlv_0, grammarAccess.getWaitAccess().getWaitKeyword_0());
		}
		(
			(
				lv_time_1_0=RULE_INT
				{
					newLeafNode(lv_time_1_0, grammarAccess.getWaitAccess().getTimeINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWaitRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_filter_0_0='A'
				{
					newLeafNode(lv_filter_0_0, grammarAccess.getFilterAccess().getFilterAKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFilterRule());
					}
					setWithLastConsumed($current, "filter", lv_filter_0_0, "A");
				}
			)
		)
		    |
		(
			(
				lv_filter_1_0='B'
				{
					newLeafNode(lv_filter_1_0, grammarAccess.getFilterAccess().getFilterBKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFilterRule());
					}
					setWithLastConsumed($current, "filter", lv_filter_1_0, "B");
				}
			)
		)
	)
;

// Entry rule entryRuleCup
entryRuleCup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCupRule()); }
	iv_ruleCup=ruleCup
	{ $current=$iv_ruleCup.current; }
	EOF;

// Rule Cup
ruleCup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cup'
		{
			newLeafNode(otherlv_0, grammarAccess.getCupAccess().getCupKeyword_0());
		}
		(
			(
				lv_cup_1_0=RULE_INT
				{
					newLeafNode(lv_cup_1_0, grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCupRule());
					}
					setWithLastConsumed(
						$current,
						"cup",
						lv_cup_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleQuantity
entryRuleQuantity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantityRule()); }
	iv_ruleQuantity=ruleQuantity
	{ $current=$iv_ruleQuantity.current; }
	EOF;

// Rule Quantity
ruleQuantity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_quantity_0_0=RULE_INT
			{
				newLeafNode(lv_quantity_0_0, grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getQuantityRule());
				}
				setWithLastConsumed(
					$current,
					"quantity",
					lv_quantity_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
