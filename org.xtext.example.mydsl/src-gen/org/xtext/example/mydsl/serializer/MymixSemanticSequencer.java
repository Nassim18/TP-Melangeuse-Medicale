/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.mymix.Cup;
import org.xtext.example.mydsl.mymix.Filter;
import org.xtext.example.mydsl.mymix.Machine;
import org.xtext.example.mydsl.mymix.MymixPackage;
import org.xtext.example.mydsl.mymix.Put;
import org.xtext.example.mydsl.mymix.Quantity;
import org.xtext.example.mydsl.mymix.Wait;
import org.xtext.example.mydsl.services.MymixGrammarAccess;

@SuppressWarnings("all")
public class MymixSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MymixGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MymixPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MymixPackage.CUP:
				sequence_Cup(context, (Cup) semanticObject); 
				return; 
			case MymixPackage.FILTER:
				sequence_Filter(context, (Filter) semanticObject); 
				return; 
			case MymixPackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case MymixPackage.PUT:
				sequence_Put(context, (Put) semanticObject); 
				return; 
			case MymixPackage.QUANTITY:
				sequence_Quantity(context, (Quantity) semanticObject); 
				return; 
			case MymixPackage.WAIT:
				sequence_Wait(context, (Wait) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cup returns Cup
	 *
	 * Constraint:
	 *     cup=INT
	 */
	protected void sequence_Cup(ISerializationContext context, Cup semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MymixPackage.Literals.CUP__CUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MymixPackage.Literals.CUP__CUP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0(), semanticObject.getCup());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Filter returns Filter
	 *
	 * Constraint:
	 *     (filter='A' | filter='B')
	 */
	protected void sequence_Filter(ISerializationContext context, Filter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     operations+=Operation+
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Put
	 *     Put returns Put
	 *
	 * Constraint:
	 *     (quantity=Quantity cup=Cup cup=Cup filter=Filter? wait+=Wait?)
	 */
	protected void sequence_Put(ISerializationContext context, Put semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Quantity returns Quantity
	 *
	 * Constraint:
	 *     quantity=INT
	 */
	protected void sequence_Quantity(ISerializationContext context, Quantity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MymixPackage.Literals.QUANTITY__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MymixPackage.Literals.QUANTITY__QUANTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0(), semanticObject.getQuantity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Wait
	 *     Wait returns Wait
	 *
	 * Constraint:
	 *     time=INT
	 */
	protected void sequence_Wait(ISerializationContext context, Wait semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MymixPackage.Literals.WAIT__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MymixPackage.Literals.WAIT__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWaitAccess().getTimeINTTerminalRuleCall_1_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
}
