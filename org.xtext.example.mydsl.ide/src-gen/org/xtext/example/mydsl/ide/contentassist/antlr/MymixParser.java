/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMymixParser;
import org.xtext.example.mydsl.services.MymixGrammarAccess;

public class MymixParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MymixGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MymixGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getFilterAccess().getAlternatives(), "rule__Filter__Alternatives");
			builder.put(grammarAccess.getPutAccess().getGroup(), "rule__Put__Group__0");
			builder.put(grammarAccess.getPutAccess().getGroup_6(), "rule__Put__Group_6__0");
			builder.put(grammarAccess.getWaitAccess().getGroup(), "rule__Wait__Group__0");
			builder.put(grammarAccess.getCupAccess().getGroup(), "rule__Cup__Group__0");
			builder.put(grammarAccess.getMachineAccess().getOperationsAssignment(), "rule__Machine__OperationsAssignment");
			builder.put(grammarAccess.getPutAccess().getQuantityAssignment_1(), "rule__Put__QuantityAssignment_1");
			builder.put(grammarAccess.getPutAccess().getCupAssignment_3(), "rule__Put__CupAssignment_3");
			builder.put(grammarAccess.getPutAccess().getCupAssignment_5(), "rule__Put__CupAssignment_5");
			builder.put(grammarAccess.getPutAccess().getFilterAssignment_6_1(), "rule__Put__FilterAssignment_6_1");
			builder.put(grammarAccess.getPutAccess().getWaitAssignment_7(), "rule__Put__WaitAssignment_7");
			builder.put(grammarAccess.getWaitAccess().getTimeAssignment_1(), "rule__Wait__TimeAssignment_1");
			builder.put(grammarAccess.getFilterAccess().getFilterAssignment_0(), "rule__Filter__FilterAssignment_0");
			builder.put(grammarAccess.getFilterAccess().getFilterAssignment_1(), "rule__Filter__FilterAssignment_1");
			builder.put(grammarAccess.getCupAccess().getCupAssignment_1(), "rule__Cup__CupAssignment_1");
			builder.put(grammarAccess.getQuantityAccess().getQuantityAssignment(), "rule__Quantity__QuantityAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MymixGrammarAccess grammarAccess;

	@Override
	protected InternalMymixParser createParser() {
		InternalMymixParser result = new InternalMymixParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MymixGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MymixGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
