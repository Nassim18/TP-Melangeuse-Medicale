/*
 * generated by Xtext 2.23.0
 */
grammar InternalMymix;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MymixGrammarAccess;

}
@parser::members {
	private MymixGrammarAccess grammarAccess;

	public void setGrammarAccess(MymixGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMachine
entryRuleMachine
:
{ before(grammarAccess.getMachineRule()); }
	 ruleMachine
{ after(grammarAccess.getMachineRule()); } 
	 EOF 
;

// Rule Machine
ruleMachine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getMachineAccess().getOperationsAssignment()); }
			(rule__Machine__OperationsAssignment)
			{ after(grammarAccess.getMachineAccess().getOperationsAssignment()); }
		)
		(
			{ before(grammarAccess.getMachineAccess().getOperationsAssignment()); }
			(rule__Machine__OperationsAssignment)*
			{ after(grammarAccess.getMachineAccess().getOperationsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePut
entryRulePut
:
{ before(grammarAccess.getPutRule()); }
	 rulePut
{ after(grammarAccess.getPutRule()); } 
	 EOF 
;

// Rule Put
rulePut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPutAccess().getGroup()); }
		(rule__Put__Group__0)
		{ after(grammarAccess.getPutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWait
entryRuleWait
:
{ before(grammarAccess.getWaitRule()); }
	 ruleWait
{ after(grammarAccess.getWaitRule()); } 
	 EOF 
;

// Rule Wait
ruleWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitAccess().getGroup()); }
		(rule__Wait__Group__0)
		{ after(grammarAccess.getWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilter
entryRuleFilter
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterAccess().getAlternatives()); }
		(rule__Filter__Alternatives)
		{ after(grammarAccess.getFilterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCup
entryRuleCup
:
{ before(grammarAccess.getCupRule()); }
	 ruleCup
{ after(grammarAccess.getCupRule()); } 
	 EOF 
;

// Rule Cup
ruleCup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCupAccess().getGroup()); }
		(rule__Cup__Group__0)
		{ after(grammarAccess.getCupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantity
entryRuleQuantity
:
{ before(grammarAccess.getQuantityRule()); }
	 ruleQuantity
{ after(grammarAccess.getQuantityRule()); } 
	 EOF 
;

// Rule Quantity
ruleQuantity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantityAccess().getQuantityAssignment()); }
		(rule__Quantity__QuantityAssignment)
		{ after(grammarAccess.getQuantityAccess().getQuantityAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getWaitParserRuleCall_0()); }
		ruleWait
		{ after(grammarAccess.getOperationAccess().getWaitParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getPutParserRuleCall_1()); }
		rulePut
		{ after(grammarAccess.getOperationAccess().getPutParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFilterAssignment_0()); }
		(rule__Filter__FilterAssignment_0)
		{ after(grammarAccess.getFilterAccess().getFilterAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFilterAccess().getFilterAssignment_1()); }
		(rule__Filter__FilterAssignment_1)
		{ after(grammarAccess.getFilterAccess().getFilterAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__0__Impl
	rule__Put__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getPutKeyword_0()); }
	'put'
	{ after(grammarAccess.getPutAccess().getPutKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__1__Impl
	rule__Put__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getQuantityAssignment_1()); }
	(rule__Put__QuantityAssignment_1)
	{ after(grammarAccess.getPutAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__2__Impl
	rule__Put__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getPutAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__3__Impl
	rule__Put__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getCupAssignment_3()); }
	(rule__Put__CupAssignment_3)
	{ after(grammarAccess.getPutAccess().getCupAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__4__Impl
	rule__Put__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getToKeyword_4()); }
	'to'
	{ after(grammarAccess.getPutAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__5__Impl
	rule__Put__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getCupAssignment_5()); }
	(rule__Put__CupAssignment_5)
	{ after(grammarAccess.getPutAccess().getCupAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__6__Impl
	rule__Put__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getGroup_6()); }
	(rule__Put__Group_6__0)?
	{ after(grammarAccess.getPutAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getWaitAssignment_7()); }
	(rule__Put__WaitAssignment_7)?
	{ after(grammarAccess.getPutAccess().getWaitAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Put__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group_6__0__Impl
	rule__Put__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getFilterKeyword_6_0()); }
	'filter'
	{ after(grammarAccess.getPutAccess().getFilterKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Put__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPutAccess().getFilterAssignment_6_1()); }
	(rule__Put__FilterAssignment_6_1)
	{ after(grammarAccess.getPutAccess().getFilterAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__0__Impl
	rule__Wait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getWaitKeyword_0()); }
	'wait'
	{ after(grammarAccess.getWaitAccess().getWaitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getTimeAssignment_1()); }
	(rule__Wait__TimeAssignment_1)
	{ after(grammarAccess.getWaitAccess().getTimeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cup__Group__0__Impl
	rule__Cup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCupAccess().getCupKeyword_0()); }
	'cup'
	{ after(grammarAccess.getCupAccess().getCupKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCupAccess().getCupAssignment_1()); }
	(rule__Cup__CupAssignment_1)
	{ after(grammarAccess.getCupAccess().getCupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__OperationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getOperationsOperationParserRuleCall_0()); }
		ruleOperation
		{ after(grammarAccess.getMachineAccess().getOperationsOperationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getQuantityQuantityParserRuleCall_1_0()); }
		ruleQuantity
		{ after(grammarAccess.getPutAccess().getQuantityQuantityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__CupAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getCupCupParserRuleCall_3_0()); }
		ruleCup
		{ after(grammarAccess.getPutAccess().getCupCupParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__CupAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getCupCupParserRuleCall_5_0()); }
		ruleCup
		{ after(grammarAccess.getPutAccess().getCupCupParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__FilterAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getFilterFilterParserRuleCall_6_1_0()); }
		ruleFilter
		{ after(grammarAccess.getPutAccess().getFilterFilterParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Put__WaitAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPutAccess().getWaitWaitParserRuleCall_7_0()); }
		ruleWait
		{ after(grammarAccess.getPutAccess().getWaitWaitParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitAccess().getTimeINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getWaitAccess().getTimeINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__FilterAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
		(
			{ before(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
			'A'
			{ after(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
		)
		{ after(grammarAccess.getFilterAccess().getFilterAKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__FilterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
		(
			{ before(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
			'B'
			{ after(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
		)
		{ after(grammarAccess.getFilterAccess().getFilterBKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__CupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCupAccess().getCupINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__QuantityAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getQuantityAccess().getQuantityINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
